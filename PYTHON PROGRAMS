1.TWO SUM:

 class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        num_to_index = {}

        for i, num in enumerate(nums):
            complement = target - num
            if complement in num_to_index:
                return [num_to_index[complement], i]
            num_to_index[num] = i

2.ADD TWO NUMBERS:

       class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: Optional[ListNode]
        :type l2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        dummy = ListNode(0)
        current = dummy
        carry = 0

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            total = val1 + val2 + carry
            carry = total // 10
            current.next = ListNode(total % 10)
            current = current.next

            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        return dummy.next


3.LONGEST SUBSTRING WITHOUT REPEATING CHARACTERS:

   class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        char_set = set()
        left = 0
        max_length = 0

        for right in range(len(s)):
            # If character is already in the set, remove from the left
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1

            # Add the new character and update the max length
            char_set.add(s[right])
            max_length = max(max_length, right - left + 1)

        return max_length

4.MEDIAN OF TWO SORTED ARRAYS:

    class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        # Merge the two sorted arrays
        merged = sorted(nums1 + nums2)
        n = len(merged)

        # Find the median
        if n % 2 == 1:
            return float(merged[n // 2])
        else:
            mid1 = merged[n // 2 - 1]
            mid2 = merged[n // 2]
            return (mid1 + mid2) / 2.0
5.REVERSE INTEGER:

    class Solution(object):
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        sign = -1 if x < 0 else 1
        x_abs = abs(x)
        reversed_num = int(str(x_abs)[::-1]) * sign
        
        # 32-bit integer range check
        if reversed_num < -2**31 or reversed_num > 2**31 - 1:
            return 0
        return reversed_num
6.DIVIDE TWO INTEGERS:

     class Solution(object):
    def divide(self, dividend, divisor):
        """
        :type dividend: int
        :type divisor: int
        :rtype: int
        """

        # Handle overflow edge case
        INT_MAX = 2**31 - 1
        INT_MIN = -2**31

        # Special case: overflow
        if dividend == INT_MIN and divisor == -1:
            return INT_MAX

        # Determine sign of result
        negative = (dividend < 0) ^ (divisor < 0)

        # Work with positive values
        dividend, divisor = abs(dividend), abs(divisor)

        quotient = 0

        # Subtract divisor multiples from dividend
        while dividend >= divisor:
            temp, multiple = divisor, 1
            while dividend >= (temp << 1):
                temp <<= 1
                multiple <<= 1
            dividend -= temp
            quotient += multiple

        # Apply sign
        if negative:
            quotient = -quotient

        # Clamp result to 32-bit integer range
        return max(min(quotient, INT_MAX), INT_MIN)
7.PALINDROME NUMBER:

       class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """

      
        if x < 0 or (x % 10 == 0 and x != 0):
            return False

        reversed_half = 0
       
        while x > reversed_half:
            reversed_half = reversed_half * 10 + x % 10
            x //= 10

       
        return x == reversed_half or x == reversed_half // 10
8.REGULAR EXPRESSION MATCHING:

         class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """

        # DP table: dp[i][j] means s[:i] matches p[:j]
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True  # empty string matches empty pattern

        # Handle patterns like a*, a*b*, a*b*c* that can match empty string
        for j in range(2, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 2]

        # Fill the DP table
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                # Case 1: Current pattern char is normal or '.'
                if p[j - 1] == s[i - 1] or p[j - 1] == '.':
                    dp[i][j] = dp[i - 1][j - 1]

                # Case 2: Current pattern char is '*'
                elif p[j - 1] == '*':
                    # Option 1: '*' counts as zero of the previous char
                    dp[i][j] = dp[i][j - 2]

                    # Option 2: '*' counts as one or more of the previous char
                    if p[j - 2] == s[i - 1] or p[j - 2] == '.':
                        dp[i][j] = dp[i][j] or dp[i - 1][j]

        return dp[len(s)][len(p)]
9.3 SUM :

    from typing import List

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()   # Sort array
        n = len(nums)
        res = []      

        for i in range(n - 2):
            # Skip duplicate
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            left, right = i + 1, n - 1
            target = -nums[i]

            while left < right:
                s = nums[left] + nums[right]

                if s == target:
                    # Found a valid triplet
                    res.append([nums[i], nums[left], nums[right]])
                    left += 1
                    right -= 1

                    # Skip duplicates for left
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    # Skip duplicates for right
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1

                elif s < target:
                    left += 1
                else:
                    right -= 1

        return res

10.ROMAN TO INTEGER:

        class Solution:
    def romanToInt(self, s: str) -> int:
        translations = {
            "I": 1,
            "V": 5,
            "X": 10,
            "L": 50,
            "C": 100,
            "D": 500,
            "M": 1000
        }
        number = 0
        s = s.replace("IV", "IIII").replace("IX", "VIIII")
        s = s.replace("XL", "XXXX").replace("XC", "LXXXX")
        s = s.replace("CD", "CCCC").replace("CM", "DCCCC")
        for char in s:
            number += translations[char]
        return number
